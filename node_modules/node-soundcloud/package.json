{
  "name": "node-soundcloud",
  "version": "0.0.5",
  "author": {
    "name": "Jake Marsh",
    "email": "jakemmarsh@gmail.com"
  },
  "description": "A node.js wrapper for the Soundcloud SDK.",
  "repository": {
    "type": "git",
    "url": "https://github.com/jakemmarsh/node-soundcloud.git"
  },
  "license": "MIT",
  "keywords": [
    "node",
    "music",
    "soundcloud"
  ],
  "engines": {
    "node": ">=0.10.26"
  },
  "dependencies": {},
  "readme": "node-soundcloud [![npm version](https://badge.fury.io/js/node-soundcloud.svg)](http://badge.fury.io/js/node-soundcloud)\n=======================================================================================================================\n\nnode.js wrapper for the Soundcloud SDK. Inspired by the libraries [soundcloud-node](https://github.com/maruf89/soundcloud-node) and [soundclouder.js](https://github.com/khilnani/soundclouder.js).\n\n---\n\n### Getting started\n\n1. `npm install --save node-soundcloud`\n2. `var SC = require('node-soundcloud')`\n\n---\n\n### Getting an OAuth Token\n\n1. Require `node-soundcloud` and initialize with your parameters\n2. Redirect user to the necessary SoundCloud Connect URL\n3. User will then be redirected to your `redirect_uri`, which can be handled by an Express endpoint (discussed in the next section).\n\n```javascript\nvar SC = require('node-soundcloud');\n\n// Initialize client\nSC.init({\n  id: 'your SoundCloud client ID',\n  secret: 'your SoundCloud client secret',\n  uri: 'your SoundCloud redirect URI'\n});\n\n// Connect user to authorize application\nvar initOAuth = function(req, res) {\n  var url = SC.getConnectUrl();\n\n  res.writeHead(301, Location: url);\n  res.end();\n};\n\n// Get OAuth token (example endpoint discussed in the next section)\n```\n\n---\n\n### Example Redirect URI Endpoint\n\nAfter your user is redirected to the Connect URL, SoundCloud will then redirect them back to the URL you have specified as your `redirect_uri`. There will also be the parameter `code` in the query string, and this is used to retrieve your OAuth token. An endpoint to handle this could work as follows:\n\n```javascript\nvar redirectHandler = function(req, res) {\n  var code = req.query.code;\n\n  SC.authorize(code, function(err, accessToken) {\n    if ( err ) {\n      throw err;\n    } else {\n      // Client is now authorized and able to make API calls\n      console.log('access token:', accessToken);\n    }\n  });\n};\n```\n\n---\n\n### Initializing with an OAuth Token\n\nIf you have already acquired an OAuth access token, you can initialize the client without going through the authorization process by passing it as an extra option:\n\n```javascript\nvar SC = require('node-soundcloud');\n\n// Initialize client with additional accessToken field\nSC.init({\n  id: 'your SoundCloud client ID',\n  secret: 'your SoundCloud client secret',\n  uri: 'your SoundCloud redirect URI',\n  accessToken: 'your existing access token'\n});\n```\n\n---\n\n### Making calls to the SoundCloud API\n\nOnce authorized (or if you're accessing unprotected endpoints), you may now make calls to the SoundCloud API [documented here](https://developers.soundcloud.com/docs/api/reference). An example could be as follows:\n\n```javascript\nSC.get('/tracks/164497989', function(err, track) {\n  if ( err ) {\n    throw err;\n  } else {\n    console.log('track retrieved:', track);\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jakemmarsh/node-soundcloud/issues"
  },
  "homepage": "https://github.com/jakemmarsh/node-soundcloud",
  "_id": "node-soundcloud@0.0.5",
  "_shasum": "0f3a59b310f327c8adcf65dfe3ab962cd59d0b03",
  "_from": "node-soundcloud@",
  "_resolved": "https://registry.npmjs.org/node-soundcloud/-/node-soundcloud-0.0.5.tgz"
}
